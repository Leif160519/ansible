# 编译升级git版本
# github地址：https://github.com/git/git/releases
# 备用地址: https://mirrors.edge.kernel.org/pub/software/scm/git/
# Leif160519
# 2020年10月30日
- hosts: dist.centos # {{{ | RedHat
  tags: git
  vars:
    git_version: git-2.29.2
    git_url: https://mirrors.edge.kernel.org/pub/software/scm/git/{{ git_version }}.tar.xz
  tasks:
    - shell: git version | awk '{print $3}'
      register: git_version_old

    - debug:
        msg: "当前机器并未安装git"
      when: git_version_old is failed

    - debug:
        msg: "当前已安装git版本:{{ git_version_old.stdout }}"
      when: not (git_version_old is failed)

    - debug:
        msg: "待安装git版本{{ git_version.split('-')[1] }}"

    - block:
        - name: 下载并解压git安装包
          unarchive:
            copy: false
            src: "{{ git_url }}"
            dest: /tmp
            owner: root
            group: root
            mode: 0755

        - name: 安装依赖包
          package:
            name: "{{ item }}"
            state: latest
          with_items:
            - curl-devel
            - expat-devel
            - gettext-devel
            - openssl-devel
            - zlib-devel
            - asciidoc
            - gcc
            - perl-ExtUtils-MakeMaker
            - perl
            - cpio
            - openssl
            - zlib
            - autoconf
            - tk

        - name: 开始编译
          shell: |
            cd /tmp/{{ git_version }}
            autoconf
            ./configure
            make
            make install
          ignore_errors: true

        - name: 检测升级后的git版本
          shell: git version
          register: git_version_new

        - debug:
           msg: "{{ git_version_new.stdout }}"

        - name: 重新登录shell即可生效
          shell: echo "重新登录shell即可生效"

      when: git_version_old.stdout is version(git_version.split('-')[1],"<")
      # }}}

- hosts: dist.ubuntu # {{{ | Ubuntu
  tags: git
  tasks:
    - name: 安装依赖
      apt:
        name: software-properties-common
        state: latest

    - name: 添加git源
      apt_repository:
          repo: git-core/ppa
      ignore_errors: true

    - name: 升级git
      apt:
        name: git
        state: latest

    - name: 清理无用的安装包缓存
      apt:
        autoclean: yes

    - name: 清理不再使用的依赖包
      apt:
        autoremove: yes

    - name: 清理下载的安装包缓存
      shell: apt clean && apt autoclean
      ignore_errors: yes
      # }}}
